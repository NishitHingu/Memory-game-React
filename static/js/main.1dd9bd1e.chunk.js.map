{"version":3,"sources":["component/Game.js","context/CardContext.js","component/Card.js","component/HowToPlay.js","component/SelectMode.js","component/PlayAgain.js","component/Header.js","App.js","reportWebVitals.js","index.js"],"names":["imagesResult","previousCardId","CardContext","createContext","CardContextProvider","props","useState","card","setCard","Provider","value","upadteCardData","data","noOfCards","newCardData","cardData","forEach","image","i","newCard","imgSrc","urls","thumb","class","id","console","log","map","len","length","randomIndex","Math","floor","random","temp","shuffle","children","Card","cardInfo","className","onClick","src","alt","HowToPlay","info","document","querySelector","style","display","handleClick","SelectMode","modeValue","setModeValue","updateMode","e","parseInt","target","changeMode","useEffect","r","widthDivider","heightDivider","width","height","setProperty","restart","PlayAgain","gameOver","currentCard","SolvedCards","Game","useContext","setGameOver","setNoOfCards","axios","get","then","response","results","catch","error","matchCard","newData","updateState","clickedCard","element","newNoOfCards","push","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1dd9bd1e.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { CardContext } from \"../context/CardContext\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport SelectMode from \"./SelectMode\";\nimport PlayAgain from \"./PlayAgain\";\nimport 'wired-elements';\n\nlet currentCard = [];\nlet imagesResult;\nlet previousCardId;\nlet SolvedCards=0;\n\n// React function component\n\nconst Game = (props) => {\n  const { card, setCard, upadteCardData } = useContext(CardContext);\n  const [ gameOver, setGameOver ] = useState(false);\n  const [ noOfCards, setNoOfCards ] = useState(4);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.unsplash.com/search/photos?query=drawing&orientation=squarish&client_id=emej8Vmgfe-Ej8nmqjOgGa_lkhCd4AEzZ6SycfL8Meg`\n      )\n      .then((response) => {\n        imagesResult= response.data.results;\n        upadteCardData(imagesResult,noOfCards);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n      console.log(noOfCards);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [noOfCards]);\n\n\t// Click eventhandler for each card\n  const handleClick = (clickedCard) => {\n\t\tlet newData = card;\n\t\tif (clickedCard.id !== previousCardId) {\n\t\t\tif (currentCard.length === 2) {\n\t\t\t\tnewData = matchCard();\n\t\t\t} else if (SolvedCards === (2*noOfCards-2)) {\n        currentCard.push(clickedCard);\n        newData = matchCard();\n        setCard(newData);\n        setGameOver(true);\n      }\n\t\t\tif (clickedCard.class !== \"card complete\") {\n\t\t\t\tclickedCard.class = clickedCard.class === \"card\" ? \"card show\" : \"card\";\n\t\t\t} else {\n        return;\n      }\n\t\t\tnewData = updateState(newData, clickedCard);\n\t\t\tsetCard(newData);\n\t\t\tcurrentCard.push(clickedCard);\n\t\t\tpreviousCardId = clickedCard.id;\n\t\t\tconsole.log(currentCard);\n\t\t}\n  };\n\n\n  // Function to checked if the 2 clicked cards have the same image\n  const matchCard = () => {\n    if (currentCard[1].imgSrc === currentCard[0].imgSrc) {\n\t\t\tcurrentCard[1].class = \"card complete\";\n\t\t\tcurrentCard[0].class = \"card complete\";\n      let newData = updateState(card, currentCard[0]);\n      newData = updateState(newData, currentCard[1]);\n      currentCard = [];\n      SolvedCards += 2;\n      return newData;\n    } else {\n      currentCard[0].class = \"card\";\n      currentCard[1].class = \"card\";\n      let newData = updateState(card, currentCard[0]);\n      newData = updateState(newData, currentCard[1]);\n      currentCard = [];\n      return newData;\n    }\n  };\n\n  // Changing the difficulty by setting the noOfCards state\n  const changeMode = (newNoOfCards) => {\n    setGameOver(false);\n    setNoOfCards(newNoOfCards);\n    SolvedCards = 0;\n    console.log(\"changeMode\");\n  }\n\n  const restart = () => {\n    setGameOver(false);\n    upadteCardData(imagesResult,noOfCards);\n    SolvedCards = 0;\n  }\n\n  const updateState = (newCard, clickedCard) => {\n    const newData = newCard.map((element) => {\n      return element.id === clickedCard.id ? clickedCard : element;\n    });\n    return newData;\n  };\n\n\n  return (\n    <div className=\"game sketchy\">\n      <SelectMode \n        changeMode={changeMode} \n        restart={restart}\n        />\n      <div className=\"card-stack sketchy-thick\">\n        {card.map((element) => (\n          <Card\n            key={element.id}\n            id={element.id}\n            cardInfo={element}\n            onClick={() => handleClick(element)}\n          />\n        ))}\n        <PlayAgain \n          gameOver={gameOver}\n          onClick={restart}\n          />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","/* eslint-disable no-unused-vars */\nimport React, { useState, createContext, useEffect } from \"react\";\n\nexport const CardContext = createContext();\n\n// Shuffling function to randomly arrange the cards data\n\nconst shuffle = (card) => {\n  let len = card.length;\n  while (len !== 0) {\n    let randomIndex = Math.floor(Math.random() * len);\n    len -= 1;\n\n    let temp = card[randomIndex];\n    card[randomIndex] = card[len];\n    card[len] = temp;\n  }\n  console.log(\"called\");\n  return card;\n};\n\nconst CardContextProvider = (props) => {\n  const [ card, setCard ] = useState([]);\n\n  function upadteCardData(data,noOfCards) {\n    let cardData = [];\n    data.forEach((image,i) => {\n      if (i < noOfCards) {\n        let newCard = { imgSrc: image.urls.thumb, class: \"card\", id: i };\n        cardData = [...cardData,newCard];\n        console.log(cardData);\n      }\n    });\n    console.log(cardData);\n    let newCardData = [];\n    newCardData = cardData.map((card,i) => {\n      let newCard = {...card};\n      newCard.id = i+noOfCards;\n      console.log(newCard.id + \" and \" + card.id);\n      return newCard;\n    });\n    cardData = [...cardData, ...newCardData];\n    cardData = shuffle(cardData);\n    console.log(cardData);\n    setCard(cardData);\n  }\n\n  \n  return (\n    <CardContext.Provider value={{ card, setCard, upadteCardData }}>\n      {props.children}\n    </CardContext.Provider>\n  );\n};\n\nexport default CardContextProvider;\n","/* eslint-disable no-unused-vars */\nimport React, { useContext } from 'react';\n\nconst Card = (props) => {\n    const data = props.cardInfo;\n    \n    return (\n        <div className=\"wrapper\" >\n            <div className={data.class} onClick={props.onClick}>\n                <div className=\"card-front\"></div> \n                <div className=\"card-back\">\n                    <img src={data.imgSrc} alt=\"loading\"></img> \n                </div>\n            </div>\n        </div>\n    );\n}\n \nexport default Card;\n","import React from 'react';\n\nconst HowToPlay = (props) => {\n    const handleClick = () => {\n        const info = document.querySelector(\".how-to-play-info-wrapper\");\n        info.style.display = info.style.display === \"block\" ? \"none\" : \"block\";\n    }\n\n    return (\n        <div className=\"how-to-play\">\n            <div className=\"how-to-play-btn sketchy-thin\" onClick={() => handleClick()}>\n                ?\n            </div>\n            <div className=\"how-to-play-info-wrapper\">\n                <h3 className=\"how-to-play-heading\">HOW TO PLAY :</h3>\n                <span className=\"how-to-play-info\">\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. \n                    Officiis quam hic minima consequuntur sunt necessitatibus optio \n                    explicabo! Nesciunt qui debitis deserunt pariatur beatae dolores nobis voluptas. \n                    Voluptatum vero ipsum ad!\n                </span>\n            </div>\n        </div>\n    );\n}\n \nexport default HowToPlay;","import React, { useState,useEffect } from 'react';\nimport HowToPlay from './HowToPlay';\n\nconst SelectMode = (props) => {\n    const [ modeValue, setModeValue ] = useState(4);\n\n    const updateMode = (e) => {\n        let value = parseInt(e.target.value);\n        console.log(value);\n        setModeValue(value);\n        props.changeMode(value);\n    }\n\n    // Sizing the wrapper\n    useEffect(() => {\n        let r = document.querySelector(\":root\");\n        let widthDivider = 4;\n        let heightDivider = modeValue/2;\n        if (modeValue === 9) {\n            widthDivider = 6;\n            heightDivider = 3;\n        } \n        let width = (90/widthDivider);\n        let height = (90/heightDivider);\n        console.log(width + \" \" + height);\n        r.style.setProperty('--wrapperHeight', `${height}%`);\n        r.style.setProperty('--wrapperWidth', `${width}%`);\n\n    },[modeValue]);\n\n    return (\n        <div className=\"option\">\n            <div className=\"modes\">\n                <span>Difficulty</span>\n                <button className=\"easy-mode sketchy-thin\" value={4} onClick={(e) => updateMode(e)}>\n                    Easy\n                </button>\n                <button className=\"medium-mode sketchy-thin\" value={6} onClick={(e) => updateMode(e)}>\n                    Medium\n                </button>\n                <button className=\"hard-mode sketchy-thin\" value={9} onClick={(e) => updateMode(e)}>\n                    Hard\n                </button>\n            </div>\n            <HowToPlay value={modeValue} />\n            <button className=\"restart-game sketchy-thin\" onClick={() => props.restart()}>\n                Restart\n            </button>\n        </div>\n    );\n}\n \nexport default SelectMode;","import React from 'react';\n\nconst PlayAgain = (props) => {\n    console.log(props.gameOver);\n    if (props.gameOver) {\n        return (\n            <div className=\"game-over-div\">\n                <button className=\"game-over sketchy-thin\" onClick={props.onClick}>\n                    Play Again\n                </button>\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n \nexport default PlayAgain;\n","import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <h1 className=\"header\">\n            Memory game\n        </h1>\n    );\n}\n \nexport default Header;\n","/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport Game from \"./component/Game\";\nimport Header from \"./component/Header\";\nimport CardContextProvider, { CardContext } from \"./context/CardContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CardContextProvider>\n        <Game />\n      </CardContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}